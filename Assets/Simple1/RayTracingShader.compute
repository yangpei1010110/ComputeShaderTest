#pragma kernel RayTracingCompute

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

struct Bounds
{
    float3 center;
    float3 extents;
};

struct BvhNode
{
    Bounds value;
    int gameObjectId;
    int materialId;
    int triangleIndex;
};


uniform RWStructuredBuffer<float3> Vertices;
uniform RWStructuredBuffer<int> Triangles;
uniform RWStructuredBuffer<BvhNode> BvhTree;
uniform int BvhTreeCount;
uniform int TrianglesCount;


struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};

uniform StructuredBuffer<Sphere> _NewSphereBuffer;
uniform StructuredBuffer<float3> _MeshBuffer;

// uniform RWStructuredBuffer<float4> _SphereBuffer;
// uniform uint _SphereBufferCount;
uniform Texture2D<float4> _SkyboxTexture;
uniform SamplerState sampler_SkyboxTexture;
uniform RWTexture2D<float4> Result;
uniform float4x4 _CameraToWorld;
uniform float4x4 _CameraInverseProjection;
uniform float2 _PixelOffset;
uniform float _Seed;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

float3 GetMin(in Bounds bounds)
{
    return bounds.center - bounds.extents;
}

float3 GetMax(in Bounds bounds)
{
    return bounds.center + bounds.extents;
}

// AABB 光线 求交算法
bool Intersects(Bounds bounds, Ray ray)
{
    float tMin = 0, tMax = FLT_MAX;
    float3 boxMin = GetMin(bounds);
    float3 boxMax = GetMax(bounds);
    float t1, t2;

    float3 invDirection = 1.0 / ray.direction;
    t1 = (boxMin.x - ray.origin.x) * invDirection.x;
    t2 = (boxMax.x - ray.origin.x) * invDirection.x;
    tMin = min(max(t1, tMin), max(t2, tMin));
    tMax = max(min(t1, tMax), min(t2, tMax));
    t1 = (boxMin.y - ray.origin.y) * invDirection.y;
    t2 = (boxMax.y - ray.origin.y) * invDirection.y;
    tMin = min(max(t1, tMin), max(t2, tMin));
    tMax = max(min(t1, tMax), min(t2, tMax));
    t1 = (boxMin.z - ray.origin.z) * invDirection.z;
    t2 = (boxMax.z - ray.origin.z) * invDirection.z;
    tMin = min(max(t1, tMin), max(t2, tMin));
    tMax = max(min(t1, tMax), min(t2, tMax));
    return tMin <= tMax;
}

bool RayIntersectsTriangle(Ray ray, float3 t0, float3 t1, float3 t2, out float outIntersectionT)
{
    const float EPSILON = 0.0000001;
    // outIntersectionT = 0;
    float3 edge1, edge2, h, s, q;
    float a, f, u, v;
    edge1 = t1 - t0;
    edge2 = t2 - t0;
    h = cross(ray.direction, edge2);
    a = dot(edge1, h);
    UNITY_BRANCH
    if (a > -EPSILON && a < EPSILON)
    {
        return false;
    }

    f = 1.0 / a;
    s = ray.origin - t0;
    u = f * dot(s, h);

    UNITY_BRANCH
    if (u < 0.0 || u > 1.0)
    {
        return false;
    }

    q = cross(s, edge1);
    v = f * dot(ray.direction, q);

    UNITY_BRANCH
    if (v < 0.0 || u + v > 1.0)
    {
        return false;
    }

    float t = f * dot(edge2, q);
    if (t > EPSILON)
    {
        outIntersectionT = t;
        return true;
    }
    else
    {
        return false;
    }
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.5f, 0.5f, 0.5f);
    hit.specular = float3(0.04f, 0.04f, 0.04f);
    hit.smoothness = float3(0.04f, 0.04f, 0.04f);
    hit.emission = 0;
    return hit;
}

float rand()
{
    float result = frac(sin(_Seed / 100.0f * dot(float2(0.5, 0.5), float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}

float3x3 GetTangentSpace(float3 normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);
    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal, float alpha)
{
    // Uniformly sample hemisphere direction
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(max(0.0f, 1.0f - cosTheta * cosTheta));
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    // Transform direction to world space
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
        bestHit.smoothness = sphere.smoothness;
        bestHit.emission = sphere.emission;
    }
}


float3 Normal(float3 t0, float3 t1, float3 t2)
{
    return normalize(cross(t1 - t0, t2 - t0));
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    uint numSpheres, stride;
    _NewSphereBuffer.GetDimensions(numSpheres, stride);
    UNITY_LOOP
    for (int i = 0; i < numSpheres; ++i)
    {
        IntersectSphere(ray, bestHit, _NewSphereBuffer[i]);
    }

    _MeshBuffer.GetDimensions(numSpheres, stride);
    UNITY_BRANCH
    if (numSpheres > 1)
    {
        UNITY_LOOP
        for (int i = 0; i < numSpheres; i += 3)
        {
            float bestT = 1.#INF;
            UNITY_BRANCH
            if (RayIntersectsTriangle(ray, _MeshBuffer[i], _MeshBuffer[i + 1], _MeshBuffer[i + 2], bestT))
            {
                UNITY_BRANCH
                if (bestT > 0 && bestT < bestHit.distance)
                {
                    bestHit.distance = bestT;
                    bestHit.position = ray.origin + bestT * ray.direction;
                    bestHit.normal = Normal(_MeshBuffer[i], _MeshBuffer[i + 1], _MeshBuffer[i + 2]);
                    bestHit.albedo = float3(0.5f, 0.5f, 0.5f);
                    bestHit.specular = float3(0.04f, 0.04f, 0.04f);
                    bestHit.smoothness = float3(0.04f, 0.04f, 0.04f);
                    bestHit.emission = 0;
                }
            };
        }
    }
    return bestHit;
}

float energy(float3 color)
{
    return dot(color, 1.0f / 3.0f);
}

float SmoothnessToPhongAlpha(float s)
{
    return pow(1000.0f, s * s);
}

float3 Shade(inout Ray ray, RayHit hit)
{
    UNITY_BRANCH
    if (hit.distance < 1.#INF)
    {
        UNITY_BRANCH
        if (any(hit.emission))
        {
            return hit.emission;
        }

        hit.albedo = min(1.0f - hit.specular, hit.albedo);
        float specChance = energy(hit.specular);
        float diffChance = energy(hit.albedo);
        float sum = specChance + diffChance;
        specChance /= sum;
        diffChance /= sum;

        ray.origin = hit.position + hit.normal * 0.001f;
        UNITY_BRANCH
        if (rand() < specChance)
        {
            float alpha = SmoothnessToPhongAlpha(hit.smoothness);
            ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
            float f = (alpha + 2) / (alpha + 1);
            ray.energy *= (1.0f / specChance) * hit.specular * sdot(hit.normal, ray.direction, f);
        }
        else
        {
            ray.direction = SampleHemisphere(hit.normal, 1.0f);
            ray.energy *= (1.0f / diffChance) * hit.albedo;
        }
        return 0.0f;
    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;
        float3 unitDirection = normalize(ray.direction);
        float t = 0.5f * (unitDirection.y + 1.0f);
        return float4((1.0f - t) * float3(1, 1, 1) + t * float3(0.5, 0.7, 1.0), 1.0);
        // Sample the skybox and write it
        // float theta = acos(ray.direction.y) / -PI;
        // float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        // return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 5).xyz;
    }
}

[numthreads(8,8,1)]
void RayTracingCompute(uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);

    // Trace and shade
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);
        if (!any(ray.energy))
        {
            break;
        }
    }
    Result[id.xy] = float4(result, 1);
}
